Import('test')FunctionDefinition('fib', ['first', 'second', 'stop'], Expressions([While(Expressions([BinaryOperation(UnaryOperation(Number('0'), 'not'), 'and', UnaryOperation(Number('0'), 'not'))]), Expressions([IfOtherwise(Expressions([BinaryOperation(Variable('first'), '<', Variable('stop'))]), Expressions([AssignmentOperation('temporary', Variable('first')), AssignmentOperation('first', Variable('second')), AssignmentOperation('second', BinaryOperation(Variable('temporary'), '+', Variable('second')))]), Break()), Continue()])), Return(Number('0'))]))FunctionCall('fib', [Number('1'), Number('1'), Number('1000')])AssignmentOperation('a1', List([Number('1'), Null(), Text('"text"')]))AssignmentOperation('_0', BinaryOperation(BinaryOperation(BinaryOperation(Expressions([BinaryOperation(UnaryOperation(Number('0.2'), '-'), '+', Number('.2'))]), '^', Expressions([BinaryOperation(Number('2'), '%', Number('2'))])), '*', BinaryOperation(Expressions([BinaryOperation(UnaryOperation(Number('2'), '-'), '+', Number('02'))]), '^', Expressions([BinaryOperation(Number('2'), '-', Number('2'))]))), '+', BinaryOperation(BinaryOperation(Expressions([BinaryOperation(UnaryOperation(Number('2'), '-'), '-', Number('2'))]), '^', Expressions([BinaryOperation(Number('2'), '+', Number('2'))])), '/', BinaryOperation(Expressions([BinaryOperation(Number('2'), '+', Number('2'))]), '^', Expressions([BinaryOperation(Number('2'), '+', Number('2'))])))))AssignmentOperation('b', ListIndex(Variable('a'), Number('1')))FunctionDefinition('a', [], Expressions([FunctionDefinition('b', [], Return(List([Number('1'), List([Number('1'), Number('2'), List([Number('2'), Number('3')])])]))), Return(Variable('b'))]))AssignmentOperation('d', FunctionCall('convert', [ListIndex(ListIndex(ListIndex(FunctionCall(FunctionCall('a', []), []), Number('1')), Number('2')), Number('0')), Text('number')]))FunctionCall('print', [ListIndex(List([Number('1'), Number('2')]), Number('0'))])FunctionCall('print', [ListIndex(ListIndex(Text('asd'), Number('1')), Number('0'))])
[Import('test'), FunctionDefinition('fib', ['first', 'second', 'stop'], Expressions([While(Expressions([BinaryOperation(UnaryOperation(Number('0'), 'not'), 'and', UnaryOperation(Number('0'), 'not'))]), Expressions([IfElse(Expressions([BinaryOperation(Variable('first'), '<', Variable('stop'))]), Expressions([AssignmentOperation(Variable('temporary'), Variable('first')), AssignmentOperation(Variable('first'), Variable('second')), AssignmentOperation(Variable('second'), BinaryOperation(Variable('temporary'), '+', Variable('second')))]), Break()), Continue()])), Return(Number('0'))])), FunctionCall('fib', [Number('1'), Number('1'), Number('1000')]), AssignmentOperation(Variable('a'), List([Number('1'), Null(), Text('\\"text\\"')])), AssignmentOperation(Variable('_0'), BinaryOperation(BinaryOperation(BinaryOperation(Expressions([BinaryOperation(UnaryOperation(Number('0.2'), '-'), '+', Number('.2'))]), '^', Expressions([BinaryOperation(Number('2'), '+', Number('2'))])), '*', BinaryOperation(Expressions([BinaryOperation(UnaryOperation(Number('2'), '-'), '+', Number('02'))]), '^', Expressions([BinaryOperation(Number('2'), '-', Number('2'))]))), '+', BinaryOperation(BinaryOperation(Expressions([BinaryOperation(UnaryOperation(Number('2'), '-'), '-', Number('2'))]), '^', Expressions([BinaryOperation(Number('2'), '+', Number('2'))])), '*', BinaryOperation(Expressions([BinaryOperation(Number('2'), '+', Number('2'))]), '^', Expressions([BinaryOperation(Number('2'), '+', Number('2'))]))))), AssignmentOperation(Variable('b'), ListIndex('a', Number('1')))]
# Code made for testing purposes #

# '=' operator
VAriable_name = .2;
variable_name = 10.2; # sets variable_name to 10.2 and returns 10.2
variable_name_2 = "a string"; # sets variable_name_2 to "a string" and returns "a string"


# '+' operator
10 + 2.2; # returns the sum of 10 and 2.2 (12.2)
22 + "17"; # "17" gets converted to a number and the expression returns the sum of 22 and 17 (39)
22 + "a"; # 22 gets converted to text, "a" gets concatenated to "22" and returns "22a"
23 + 1, 2, 3,; # 23 gets prepended to 1, 2, 3 and returns 23, 1, 2, 3
2 + null; # returns 2

"22" + 23; # converts 23 to text and concatenates it to "22" - also returns "2223"
"asf" + "ghk"; # concatenates "ghk" to "asf" and returns it ("asfghk")
"df" + 1, 2, 3,; # prepends "df" to 1, 2, 3 and returns it ("df", 1, 2, 3)
"c" + null; # returns "c"

1, 2, 3, + 6; # appends 6 to 1, 2, 3 and returns it (1, 2, 3, 6)
1, 2, 3, + "2f"; # appends "2f" to 1, 2, 3 and returns it (1, 2, 3, "2f")
1, 2, 3, + 2, 3,; # appends 2, 3 to 1, 2, 3 and returns it (1, 2, 3, 2, 3)
1, 2, 3, + null; # appends null to 1, 2, 3 and returns 1, 2, 3, null

null+1; # returns 1
null+"2"; # returns 2
null+"a"; # returns "a"
null+1, 2, 3,; # returns 1, 2, 3
null+null; # returns null


# '-' operator
2 - 7; # returns the difference of 2 and 7 (-5)
3 - "1"; # converts "1" to number and returns 3 - 1 (2)
3 - "a"; # converts 3 to text and converts every instance of "a" in "3" and returns the result ("3")
5 - 1, 2, 3,; # returns itself (5)
2 - 1, 2, 3, 5,; # 2 is in the list 1, 2, 3, 5 returns null
2 - null; # returns 2

"a3t42847766t" - 76; # converts 76 to text and removes every instance of "76" in the text and returns the result ("a3t428476t")
"sdf" - "f"; # removes every instance of "f" in "sdf" and returns it ("sd")
"fff" - 1, 2, "f",; # if "fff" is in the list returns null otherwise returns "fff" ("fff")
"asf" - null; # returns "asf"

1, 2, 3, 2, - 2; # removes every instance of 2 in 1, 2, 3, 2 and returns it (1, 3)
1, 2, - "2"; # removes every instance of "2" in 1, 2 and returns it (1, 2)
2, 3, - 3, 3,; # for each element: removes every instance of the element in the first list (2, 3) and returns it (2,)
1, 3, - null; # return 1, 3

null-1; # returns the opposite of 1 (-1)
null-"2"; # returns the opposite of "2" when converted to number (-2)
null-"a"; # returns null
null-1, 2,; # returns null
null-null; # returns null


# '*' operator
2 * 2; # returns the product of 2 multiplied with 2 (4)
13 * "2"; # converts "2" to number and returns the result of 13 * 2 (26)
13 * "a"; # concatenates "a" to "a" 12 times and returns it ("aaaaaaaaaaaaa")
2 * 1, 2,; # appends 1, 2 to 1, 2, 2 times and returns it (1, 2, 1, 2,)
3 * null; # returns null

"21" * 6; # concatenates "21" to itself 5 times and returns it ("212121212121")
"3" * "5"; # converts "3" to number and returns the result of 3 * "5" ("555")
"a" * "5"; # converts "5" to number and returns the result of "a" * 5 ("aaaaa")
"dd" * "as"; # returns null
"2" * 1, 2,; # converts "2" to number and returns the result of 2 * 1, 2, (1, 2, 1, 2,)
"a" * 1, 2,; # returns null
"asd" * null; # returns null

1, 2, * 2; # concatenates 1, 2, to itself 1 time and returns it (1, 2, 1, 2,)
1, 2, * "3"; # converts "3" to number and returns the result of 1, 2, * 3 (1, 2, 1, 2, 1, 2,)
1, 2, * "as2d"; # returns null
1, 2, * 1, 2, 3,; # returns null
1, 3, * null; # returns null

null*2; # returns 0
null*"3"; # returns 0
null*"a"; # returns null
null*1,2,; # returns null
null*null; # returns null


# '/' operator
5 / 2; # returns the result of dividing 5 by 2 (2.5)
3 / "1"; # converts "1" to number and returns the result of 3 / 1 (3)
2 / "a"; # returns null
5 / 1, 2,; # returns null
4 / null; # returns null
10 / 0; # returns null

"a" / 2; # returns null
"5" / 2; # converts "5" to number and returns the result of 5 / 2 (2.5)
"5" / "2"; # converts "5" to number, converts "2" to number and returns the result of 5 / 2 (2.5)
"25" / 1, 2,; # returns null
"f2" / null; # returns null
"4" / "0"; # returns null

1, 2, / 1; # returns null
1, / 2; # returns null
2, 3, 4, / "a"; # returns null
2, 3 / 2,; # returns null
2, 3, / null; # returns null

null/4; # returns 0
null/".2"; # returns 0
null/"a"; # returns null
null/1, 2,; # returns null
null/null; # returns null


# '^' operator
2 ^ 3; # raises 2 to the power of 3 and returns the result (8)
2 ^ "2"; # converts "2" to string, raises 2 to the power of it and returns the result (4)
2 ^ "a"; # returns null
3 ^ 1, 2,; # returns null
2 ^ null; # returns null

"a" ^ 2; # returns null
"2" ^ 3; # converts "2" to number and returns the result of 2 ^ 3 (8)
"df" ^ "a"; # returns null
"asd" ^ 1, 2,; # returns null
"asd" ^ null; # returns null

1, 2, ^ 1; # returns null
1, 2, ^ "a"; # returns null
1, 2, ^ 1,; # returns null
1, 2, ^ null; # returns null

null^1; # returns 0
null^"2" # returns 0
null^1,2,; # returns null
null^null; # returns null


# '%' operator
5 % 2; # returns the remainder after dividing 5 with 2 (1)
5 % "2"; # converts "2" to number and returns the result of 5 % 2 (1)
5 % "a"; # returns null
3 % 1, 2, "df",; # returns null
2 % null; # returns null
3 % 0; # returns null
2 % "0"; # returns null

"a" % 2; # returns null
"2" % 2; # converts "2" to number and returns result of 2 % 2 (0)
"d" % "a"; # returns null
"2" % "1"; # converts "2" to number, converts "1" to number and returns result of 2 % 1 (0)
"asd" % 1, 2,; # returns null
"asd" % null; # returns null

1, 2, % 1; # returns null
1, 2, % "a"; # returns null
1, 2, % 1, 2,; # returns null
1, 2, % null; # returns null

null%1; # returns 0
null%"2"; # returns 0
null%"a"; # returns null
null%1,2,; # returns null
null%null; # returns null


# 'input' keyword
input variable_name; # gets value from stdin, sets variable_name to the gotten value and returns the value


# 'output' keyword
output variable_name; # pushes the value of variable_name to stdout and returns the value


# 'error' keyword
error variable_name; # pushes the value of variable_name to stderr and returns the value


# 'while' keyword
condition = 1
while condition (condition = 0;); # while the first argument doesn't return 0, null or "", runs the 2nd argument (checks only once per loop)


# 'if' and 'otherwise' keywords
if condition (a=2;) otherwise (a=3;); # if condition doesn't return 0, null or "", runs the 2nd argument, otherwise runs the 4th argument, returns 0 if 'otherwise' ran, 1 if 'if' ran
if condition (a=2;); # if condition doesn't return 0, null or "", runs the 2nd argument, returns 0 if it didn't run, 1 if it ran


# 'function' keyword
function function_name(parameter_1, parameter_2) (parameter_1 = parameter_2; return parameter1;); # first argument becomes the name of the function, second argument are parameters separated by commas and the third argument is the code that gets ran - recursion allowed

function_name(1, 2); # returns 2

# 'import' keyword
import sample; # imports every function from 'sample.nem', returns "sample"
function_name(2, 2); # returns 2


# 'file' keyword
file "README.md" read variable_name; # Reads from file "README.md" and sets the result to variable_name, returns variable_name
file "README.md" write variable_name; # Writes to file "README.md" from variable_name, returns variable_name


# Conversions
convert variable_name number; # converts variable_name to number
convert variable_name text; # converts variable_name to text
convert variable_name list; # converts variable_name to list

#1234.2 -> "1234.2"
#1234.2 -> "1", "2", "3", "4", ".", "2",

#"abc123" -> null; "1234" -> 1234; "1234 " -> null
#"abc123" -> "a", "b", "c", "1", "2", "3",

#1, 2, 3, -> 123; "a", 1, -> null
#1, 2, 3, "a", -> "123a"


# Indices
a_list = 1, 2, 3, "a",;
a_list[0]; # returns 1


# 'break' and 'continue' keywords
# Same as in Python
i = 0;
while (i < 100)
(
    i = i + 1;
    if (i > 20) (
        break;
    )
    else (
        output i;
    );
);
while 1
(
    continue;
);


# 'not' operator
if (not 1) (a=2;);
if (not "") (b=2;);


# 'is' operator
if (1 is 2) (a=2;);
if (1 is 1) (a=3;);


# 'and' operator
if (1 is 1 and 2 is 2) (a=2;);


# 'or' operator
if (1 is 2 or 1 is 1) (a=2;);


# '>' operator
if (not (1 > 2)) (a = 2;);


# '<' operator
if (1 < 2) (a = 2;)